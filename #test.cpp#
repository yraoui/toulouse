#include <iostream.h>
#include <string.h>
#include  "sterio_interpretation.cpp"
void test(){
  SterioTests st;
  vector<IplImage*>  image_Database;
  MatrixXd L(10,10);
  image_Database=L.load_image_db();

  map<int,*string> *robot;
  map<int,*int> *sensor;
  map<int,*O> *observation;
  map<int,*L> *landmark;
  robot[0]="pioneer";
  robot[1]="ax11";
  robot[2]="hrp2";
  robot[3]="rackam_rouge";
  sensor[0]=10;
  sensor[1]=20;
  sensor[2]=30;
  sensor[3]=40;
  start(robot[0],ekf_part);
}


motionmodel()



void PioneerModelView(int index){
map<int,*string> choice_robot;
choice_robot[0]="pioneer1.jpg";
choice_robot[1]="pioneer2.jpg";
IplImage *imshow=cvLoadImage(choice_robot[index]);
cvShowImage("model view",imshow);
}






void observation_z_pred(){

distance=sqrt((X(0)-Xfeature(0))*(X(0)-Xfeature(0))+(X(1)-Xfeature(1))*(X(1)-Xfeature(1)));


// to do direction=atan();

};





Eigen::VectorXd prediction(Eigen::VectorXd X){          
 
VectorXf noise = VectorXf::Random(3) ;

X(0)=X(0)+noise(0);
X(1)=X(1)+noise(1);
X(2)=X(2)+noise(2);
X(4)=0.0;
return X;
}




VectorXd distance_computation(VectorXd Xrobot,MatrixXd cloud_precedent)
    {
      VectorXd X_precedent(4);
        int i,j,min_i;
        float min=0.0;
        for(i=0;i<numberOfParticle;i++){
          if (min> ( sqrt((Xrobot(0)-cloud_precedent(i,0))*(Xrobot(0)-cloud_precedent(j,0))+(Xrobot(1)-cloud_precedent(i,1))*(Xrobot(1)-cloud_precedent(i,1)))));
                  
              {
                  min=( sqrt((Xrobot(0)-cloud_precedent(i,0))*(Xrobot(0)-cloud_precedent(i,0))+(Xrobot(1)-cloud_precedent(i,1))*(Xrobot(1)-cloud_precedent(i,1))));
                  
                  min_i=i;   
              }        
        }
        
        X_precedent(0)=cloud_precedent(min_i,0);
        X_precedent(1)=cloud_precedent(min_i,1);
        X_precedent(2)=cloud_precedent(min_i,2);
        X_precedent(3)=0.0;
        return X_precedent;
    }
    



Eigen::MatrixXd cloud_particles(Eigen::VectorXd X_predicted){
  
VectorXf noise ;

 Eigen::MatrixXd X_i(100,4);
 int i;
 for(i=0;i<numberOfParticle;i++){
     noise = VectorXf::Random(3);
     X_i(i,0)=X_predicted(0)+noise(0);
     X_i(i,1)=X_predicted(1)+noise(1);
     X_i(i,2)=X_predicted(2)+noise(2);
 X_i(i,3)=0.0;
 }

    xtrue=X_predicted;
    
 return X_cloud_particles;
  
}






void ekf_estimation_1D(){

*mu=*mu_bar+K*(zt-Ct**mu_bar);
*sigma=sqrt(1-K)**sigma_pred;
K=(*sigma_pred)*(*sigma_pred)/((*sigma_pred)*(*sigma_pred)+(*sigma_obs)*(*sigma_obs));

}


void PioneerSpecifications(){

  string size="50 cm or 19,7 in";
  string computer="64-bit Dual Core 1.8 GHz Atom industrial PC
2GB DDR3 RAM
Wireless Ethernet
3x USB 2.0
2x RS-232 serial
2x gigabit ethernet
Audio input and output, speakers included";


string weight="60 kg (132 lbs)";

string os="Ubuntu Linux or Windows 7";

string max_speed="1,8 m/s";

char **features={"Autonomous Navigation and Mapping Software","SICK S300 Laser Scanner","Joystick (used for Mappi
","Speakers & Voice Synthesis Software","Pioneer Software Development Kit"};
char **optional_features={"Digital Pan/Tilt/Zoom Camera","Robotic Arms","Pan Tilt Positioning Unit","GPS Systems"};

cout<<size <<" "<<endl;
cout<<computer <<" "<<endl;
cout<<weight <<" "<<endl;
cout<<os <<" "<<endl;
cout<<max_speed <<" "<<endl;
for(int i=0;i<5;i++)
cout<<features[i]<<" "<<endl;
for(int i=0;i<4;i++)
cout<<optional_features[i]<<" "<<endl;

}


}






